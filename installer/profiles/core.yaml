name: core
description: >-
  Core services required for the R.A.L.F. homelab environment. The profile installs
  databases, source control and automation runtimes in a dependency aware order.
components:
  - name: postgresql
    description: Primary relational database used for inventory and status data.
    tasks:
      - Prepare storage volumes for PostgreSQL
      - Deploy PostgreSQL container or VM
      - Configure users and initial databases
    actions:
      - provider: proxmox
        operation: create_lxc
        options:
          node: pve01
          vmid: 201
          hostname: pgsql01.lab.local
          template: debian12-standard
          cores: 4
          memory: 8192
          disk_size_gb: 120
          storage: local-lvm
      - provider: proxmox
        operation: configure_network
        options:
          vmid: 201
          networks:
            - name: eth0
              bridge: vmbr0
              ip: 10.42.0.11/24
              gateway: 10.42.0.1
      - provider: proxmox
        operation: run_commands
        options:
          vmid: 201
          commands:
            - apt-get update
            - apt-get install -y postgresql
            - systemctl enable --now postgresql
      - provider: service
        operation: configure_postgresql
        options:
          host: pgsql01.lab.local
          port: 5432
          admin_user: postgres
          database: ralf_core
          app_user_secret: vault://postgresql/ralf-core/app-user
  - name: gitea
    description: Git service hosting Infrastructure-as-Code and documentation.
    depends_on:
      - postgresql
    tasks:
      - Provision Gitea runtime and required volumes
      - Configure database connection credentials
      - Seed repositories for automation and knowledge artifacts
    actions:
      - provider: proxmox
        operation: create_lxc
        options:
          node: pve01
          vmid: 202
          hostname: gitea01.lab.local
          template: debian12-standard
          cores: 4
          memory: 6144
          disk_size_gb: 80
          storage: local-lvm
      - provider: proxmox
        operation: configure_network
        options:
          vmid: 202
          networks:
            - name: eth0
              bridge: vmbr0
              ip: 10.42.0.21/24
              gateway: 10.42.0.1
      - provider: proxmox
        operation: run_commands
        options:
          vmid: 202
          commands:
            - apt-get update
            - apt-get install -y docker.io
            - docker compose -f /opt/gitea/docker-compose.yml up -d
      - provider: service
        operation: configure_gitea
        options:
          url: https://gitea.lab.local
          database_dsn: postgresql://gitea:vault://postgresql/gitea/db@pgsql01.lab.local:5432/gitea
          admin_secret: vault://gitea/admin/password
          oauth_secret: vault://gitea/oauth/client-secret
  - name: vaultwarden
    description: Secrets management service for credentials and API tokens.
    depends_on:
      - postgresql
    tasks:
      - Deploy Vaultwarden service
      - Configure admin account and secrets storage
      - Synchronise bootstrap secrets with installation nodes
      - Establish rotation jobs for Vaultwarden collections
      - Schedule compliance scans for critical credentials and policies
    actions:
      - provider: proxmox
        operation: create_lxc
        options:
          node: pve01
          vmid: 203
          hostname: vault01.lab.local
          template: debian12-standard
          cores: 2
          memory: 4096
          disk_size_gb: 40
          storage: local-lvm
      - provider: proxmox
        operation: configure_network
        options:
          vmid: 203
          networks:
            - name: eth0
              bridge: vmbr0
              ip: 10.42.0.31/24
              gateway: 10.42.0.1
      - provider: proxmox
        operation: run_commands
        options:
          vmid: 203
          commands:
            - apt-get update
            - apt-get install -y docker.io
            - docker run -d --name vaultwarden -p 80:80 vaultwarden/server:latest
      - provider: service
        operation: configure_vaultwarden
        options:
          url: https://vault.lab.local
          admin_token_secret: vault://vaultwarden/admin/token
          smtp_secret: vault://vaultwarden/smtp/password
      - provider: vaultwarden
        operation: rotate_secrets
        options:
          url: https://vault.lab.local
          access_token: "{{ env.VAULTWARDEN_ADMIN_TOKEN }}"
          items:
            - item_id: automation-ansible-api
              label: Ansible Automation API Token
              field: password
              length: 48
            - item_id: automation-opentofu-api
              label: OpenTofu Provisioning Token
              field: password
              length: 48
  - name: automation
    description: Automation runtimes required by infrastructure agents.
    depends_on:
      - gitea
      - vaultwarden
    tasks:
      - Deploy OpenTofu execution environment
      - Deploy Ansible control node
      - Register automation credentials in Vaultwarden
  - name: observability
    description: Monitoring stack with Prometheus, Loki and Grafana.
    depends_on:
      - postgresql
      - automation
    tasks:
      - Deploy Prometheus and scrape configuration
      - Deploy Loki for log aggregation
      - Provision Grafana dashboards and data sources
    actions:
      - provider: proxmox
        operation: create_lxc
        options:
          node: pve01
          vmid: 211
          hostname: mon01.lab.local
          template: debian12-standard
          cores: 4
          memory: 8192
          disk_size_gb: 80
          storage: local-lvm
      - provider: proxmox
        operation: configure_network
        options:
          vmid: 211
          networks:
            - name: eth0
              bridge: vmbr0
              ip: 10.42.0.51/24
              gateway: 10.42.0.1
      - provider: proxmox
        operation: run_commands
        options:
          vmid: 211
          commands:
            - apt-get update
            - apt-get install -y docker.io docker-compose-plugin curl
            - mkdir -p /etc/ralf/prometheus/targets /etc/ralf/loki /etc/ralf/grafana/dashboards
            - test -f /etc/ralf/prometheus/prometheus.yml || touch /etc/ralf/prometheus/prometheus.yml
            - test -f /etc/ralf/loki/config.yaml || touch /etc/ralf/loki/config.yaml
            - docker rm -f prometheus 2>/dev/null || true
            - docker network create observability || true
            - |
              docker run -d --name prometheus --restart unless-stopped \
                --network observability -p 9090:9090 \
                -v /etc/ralf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
                -v /etc/ralf/prometheus/targets:/etc/prometheus/targets \
                prom/prometheus:latest
            - docker rm -f loki 2>/dev/null || true
            - |
              docker run -d --name loki --restart unless-stopped \
                --network observability -p 3100:3100 \
                -v /etc/ralf/loki/config.yaml:/etc/loki/local-config.yaml \
                -v /etc/ralf/loki:/loki \
                grafana/loki:latest
            - docker rm -f grafana 2>/dev/null || true
            - |
              docker run -d --name grafana --restart unless-stopped \
                --network observability -p 3000:3000 \
                -v /etc/ralf/grafana:/var/lib/grafana \
                grafana/grafana:latest
      - provider: service
        operation: configure_prometheus
        options:
          host: mon01.lab.local
          config_path: installer/assets/observability/prometheus.yml
          rules:
            - installer/assets/observability/alerts/core-services.yaml
      - provider: service
        operation: configure_loki
        options:
          host: mon01.lab.local
          config_path: installer/assets/observability/loki-config.yaml
          retention: 168h
      - provider: service
        operation: configure_grafana
        options:
          host: mon01.lab.local
          admin_secret: vault://grafana/admin/password
          datasources:
            - installer/assets/observability/datasources/prometheus.yaml
            - installer/assets/observability/datasources/loki.yaml
          dashboards:
            - installer/assets/observability/dashboards/core-services.json
      - provider: service
        operation: register_prometheus_targets
        options:
          host: mon01.lab.local
          target_file: /etc/ralf/prometheus/targets/core-services.json
          services:
            - name: postgresql
              targets:
                - 10.42.0.11:9187
            - name: gitea
              targets:
                - 10.42.0.21:3000
            - name: vaultwarden
              targets:
                - 10.42.0.31:80
            - name: ralf-ui
              targets:
                - 10.42.0.41:80
  - name: ralf-ui
    description: Web-Frontend und Matrix-Webhooks f√ºr R.A.L.F. Status & Operator-Feedback.
    depends_on:
      - postgresql
      - automation
    tasks:
      - Provision Node.js build runner for the UI bundle
      - Build ralf-ui React frontend and publish static assets via Nginx
      - Register Matrix webhook endpoints for health and automation events
      - Synchronise Matrix bot secrets from Vaultwarden to runtime environment
    actions:
      - provider: proxmox
        operation: create_lxc
        options:
          node: pve01
          vmid: 210
          hostname: ui01.lab.local
          template: debian12-standard
          cores: 2
          memory: 4096
          disk_size_gb: 30
          storage: local-lvm
      - provider: proxmox
        operation: configure_network
        options:
          vmid: 210
          networks:
            - name: eth0
              bridge: vmbr0
              ip: 10.42.0.41/24
              gateway: 10.42.0.1
      - provider: service
        operation: run_commands
        options:
          host: ui01.lab.local
          commands:
            - apt-get update
            - apt-get install -y nodejs npm nginx
            - npm install -g pnpm
      - provider: service
        operation: build_frontend
        options:
          host: ui01.lab.local
          repository: https://gitea.lab.local/ralf/ralf-ui.git
          branch: main
          build_command: pnpm install && pnpm build
          artifact_path: dist
          deploy_path: /var/www/ralf-ui
      - provider: service
        operation: configure_nginx_site
        options:
          host: ui01.lab.local
          server_name: status.lab.local
          root: /var/www/ralf-ui
          tls_secret: vault://nginx/status.lab.local/tls
      - provider: service
        operation: configure_webhooks
        options:
          name: matrix_webhooks
          host: ralf-core.lab.local
          endpoints:
            - event: health_alert
              url: https://ralf-core.lab.local/webhooks/matrix/health
              secret: vault://matrix/appservice/health
            - event: automation_update
              url: https://ralf-core.lab.local/webhooks/matrix/infra
              secret: vault://matrix/appservice/infra
          notify_ui: https://status.lab.local/api/webhook-refresh
      - provider: vaultwarden
        operation: sync_secrets
        options:
          url: https://vault.lab.local
          access_token: "{{ env.VAULTWARDEN_ADMIN_TOKEN }}"
          items:
            - item_id: matrix-appservice-health
              export_to: /etc/ralf/matrix/health.token
              permissions: 0600
            - item_id: matrix-appservice-infra
              export_to: /etc/ralf/matrix/infra.token
              permissions: 0600
workflows:
  - name: Main Health Loop Orchestration
    loop: main
    runtime: n8n
    entrypoint: flows/main-health-loop.json
    description: >-
      Automatisiert den Gesundheitszyklus: sammelt Prometheus- und Loki-Events,
      priorisiert Findings und st√∂√üt Reparatur-Playbooks sowie Dokumentationsl√§ufe an.
    phases:
      - Sammeln von Telemetrie (Prometheus/Loki) und Policy-Hinweisen
      - Priorisieren & Korrelieren der Findings mit Wissensdatenbankseintr√§gen
      - Ausl√∂sen von Self-Healing-Playbooks (Ansible/OpenTofu) und Dokumentation
      - R√ºckmeldung an Operatoren und Lessons-Learned-Aktualisierung
    inputs:
      - Prometheus Alerts
      - Loki Incidents
      - Ralf-Core Policy Checks
    outputs:
      - Ansible Self-Healing Jobs
      - Gitea Status- und Lessons-Learned-Updates
      - Matrix Health Notifications
  - name: Foreman Discovery Sweep
    loop: discovery
    runtime: foreman
    entrypoint: org.ralf.foreman.discovery
    description: >-
      Startet Foreman-Discovery, normalisiert Hardware-Facts und publiziert
      Inventar-Updates zur√ºck an Ralf-Core und n8n.
    phases:
      - Foreman Discovery Plugin ansto√üen und PXE/DHCP-Ergebnisse einsammeln
      - Hardware-Facts normalisieren und Rollen-Vorschl√§ge generieren
      - Inventar-Updates nach Ralf-Core schreiben und Events an Planner senden
    inputs:
      - Foreman Discovery Facts
      - DHCP / ARP Events
    outputs:
      - Inventar-Aktualisierungen in PostgreSQL
      - Discovery Tickets f√ºr A_PLAN
  - name: Adaptive Optimizer
    loop: adaptive
    runtime: n8n
    entrypoint: flows/adaptive-optimizer.json
    description: >-
      Konsolidiert Kapazit√§tsdaten, plant Umverteilungen und st√∂√üt √Ñnderungen
      an Automations- und Dokumentationspfade an.
    phases:
      - Kapazit√§tsdaten sammeln und Engp√§sse erkennen
      - Simulationen aus Planner und Foreman-Kandidaten zusammenf√ºhren
      - Ma√ünahmenkatalog ableiten und Automationspfade planen
      - √Ñnderungen dokumentieren und Kommunikation ausl√∂sen
    inputs:
      - Kapazit√§tsreports aus Prometheus
      - Planner-Simulationen aus A_PLAN
      - Foreman Hardware Insights
    outputs:
      - OpenTofu Scaling-Pl√§ne
      - Ansible Drift-Korrekturen
      - Gitea Change-Logs
scheduler:
  loops:
    main:
      description: Herzschlag f√ºr Health-, Repair- und Dokumentationsl√§ufe.
      triggers:
        - type: cron
          expression: "*/5 * * * *"
          timezone: Europe/Berlin
        - type: timer
          every: PT15M
    discovery:
      description: Regelm√§√üige Netzwerk- und Inventar√ºberpr√ºfung durch Foreman.
      triggers:
        - type: timer
          every: 3600
    adaptive:
      description: Strategische Bewertung von Kapazit√§ten und Optimierungen.
      triggers:
        - type: cron
          expression: "0 * * * *"
